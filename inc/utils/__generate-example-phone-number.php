<?php
/**
 * Generate an example phone number based on the country code and pattern.
 *
 * The example is generated by filling the pattern with zeros, except for Ukraine,
 * where the first code is taken from the pattern.
 *
 * @param string $iso Country ISO code.
 * @param string $pattern Pattern of the phone number for the country.
 * @param int    $length Length of the phone number for the country.
 *
 * @return string
 */
function generate_example_phone_number($country_code, $pattern, $length) {
    // Remove leading and trailing pattern characters: '/', '^', '$'
    $pattern = trim($pattern, '/^$');

    // Case: (X|Y|Z...) followed by \d{N}
    if (
        strpos($pattern, '|') !== false &&
        preg_match('/^\(([^)]+)\)\\\\d\{(\d+)\}$/', $pattern, $m)
    ) {
        $prefixes = explode('|', $m[1]);
        $digits = (int)$m[2];
        $result = [];
        foreach ($prefixes as $p) {
            // Variant like [2368]\d — make 2X, 3X, etc.
            if (preg_match('/^\[(\d+)\]\\\\d$/', $p, $pm)) {
                $range = str_split($pm[1]);
                foreach ($range as $r) {
                    $result[] = $r . 'X';
                }
            } else {
                $clean_prefix = str_replace('-', '', $p); // Remove hyphens
                $result[] = $clean_prefix;
            }
        }
        $example = implode('| ', $result) . str_repeat('0', $digits);
        return $example;
    }

    // Legacy case: (X|Y|Z)\d{N}
    if (
        strpos($pattern, '|') !== false &&
        preg_match('/^\(([^)]+)\)\\\\d\{(\d+)\}\\\\d\{(\d+)\}$/', $pattern, $m)
    ) {
        $prefixes = explode('|', $m[1]);
        $digits1 = (int)$m[2];
        $digits2 = (int)$m[3];
        $result = [];
        foreach ($prefixes as $p) {
            $clean_prefix = str_replace('-', '', $p); // Remove hyphens
            $result[] = $clean_prefix . str_repeat('0', $digits1 - strlen($clean_prefix));
        }
        $example = implode('| ', $result) . str_repeat('0', $digits2);
        return $example;
    }

    // Prefix and numbers, like 5\d{6}
    if (preg_match('/([0-9\[\]\(\)\-]+)\\\\d\{(\d+)\}/', $pattern, $m)) {
        $prefix = preg_replace('/[\[\]\(\)]/', '', $m[1]);
        $prefix = str_replace('-', '', $prefix); // Remove hyphens
        $digits = (int)$m[2];
        $example = $prefix . str_repeat('0', $digits);
        return substr($example, 0, $length);
    }

    // Range in square brackets, like [29]\d{8}
    if (preg_match('/\[(\d+)\]\\\\d\{(\d+)\}/', $pattern, $m)) {
        $prefix = $m[1][0];
        $digits = (int)$m[2];
        return $prefix . str_repeat('0', $digits);
    }

    // Only digits, like \d{9}
    if (preg_match('/\\\\d\{(\d+)\}/', $pattern, $m)) {
        return str_repeat('0', $m[1]);
    }

    // Range like [2-7]\d{8}
    if (preg_match('/\[(\d+\-\d+)\]\\\\d\{(\d+)\}/', $pattern, $m)) {
        list($start, $end) = explode('-', $m[1]);
        $prefix = $start;
        $digits = (int)$m[2];
        return $prefix . str_repeat('0', $digits);
    }

    // Fallback: just zeros with needed length
    return str_repeat('0', $length);
}
